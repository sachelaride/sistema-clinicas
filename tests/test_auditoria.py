"""Testes unitários para o módulo de Auditoria Centralizada.\n"""\nimport pytest\nfrom fastapi.testclient import TestClient\nfrom sqlalchemy import create_engine\nfrom sqlalchemy.orm import sessionmaker\nfrom uuid import uuid4\nfrom datetime import datetime\n\nfrom main import app\nfrom database.base import Base\nfrom database.session import get_db\nfrom models.usuario import Usuario, Perfil\nfrom models.clinica import Clinica\nfrom models.auditoria import LogAuditoriaGeral\n\n# Configuração do banco de dados de teste em memória\nSQLALCHEMY_DATABASE_URL = "sqlite:///:memory:"\nengine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})\nTestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n# Sobrescrever a dependência do banco de dados\ndef override_get_db():\n    db = TestingSessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\napp.dependency_overrides[get_db] = override_get_db\n\nclient = TestClient(app)\n\n@pytest.fixture(scope="module", autouse=True)\ndef setup_and_teardown_db():\n    """Cria e limpa o banco de dados para os testes do módulo."""\n    Base.metadata.create_all(bind=engine)\n    yield\n    Base.metadata.drop_all(bind=engine)\n\n@pytest.fixture(scope="function")\ndef db_session():\n    """Fornece uma sessão de banco de dados limpa para cada teste."""\n    db = TestingSessionLocal()\n    # Limpar tabelas relevantes antes de cada teste\n    db.query(LogAuditoriaGeral).delete()\n    db.query(Usuario).delete()\n    db.query(Perfil).delete()\n    db.query(Clinica).delete()\n    db.commit()\n    yield db\n    db.close()\n\n@pytest.fixture(scope="function")\ndef authenticated_admin_client(db_session):\n    """Cria um cliente autenticado como administrador para os testes."""\n    # Criar dados necessários\n    clinica = Clinica(nome="Clínica Admin Teste")\n    perfil_admin = Perfil(nome="Administrador")\n    db_session.add_all([clinica, perfil_admin])\n    db_session.commit()\n    db_session.refresh(clinica)\n    db_session.refresh(perfil_admin)\n\n    username = f"admin_{uuid4().hex[:4]}"\n    password = "adminpass"\n    \n    # Usar a API para criar o usuário e obter o token\n    user_data = {\n        "nome_usuario": username,\n        "nome_completo": "Admin Teste",\n        "senha": password,\n        "perfil_id": perfil_admin.perfil_id,\n        "clinica_id": clinica.id\n    }\n    client.post("/api/v1/usuarios/", json=user_data)\n    \n    login_data = {"nome_usuario": username, "senha": password}\n    login_response = client.post("/api/v1/auth/login", data=login_data)\n    token = login_response.json()["access_token"]\n    \n    # Criar cliente autenticado\n    auth_client = TestClient(app)\n    auth_client.headers = {"Authorization": f"Bearer {token}"}\n    auth_client.clinica_id = clinica.id\n    auth_client.user_id = login_response.json()["usuario"]["usuario_id"]\n    \n    return auth_client\n\nclass TestAuditoriaAPI:\n    """Testes para os endpoints de Auditoria Centralizada."""\n\n    def test_create_and_get_audit_log(self, authenticated_admin_client, db_session):\n        """Testa a criação e recuperação de um log de auditoria."""\n        # Criar um log diretamente no banco para simular a criação por um serviço\n        log_data = {\n            "usuario_id": authenticated_admin_client.user_id,\n            "clinica_id": authenticated_admin_client.clinica_id,\n            "acao": "TEST_ACTION",\n            "nome_tabela": "test_table",\n            "id_registro_afetado": str(uuid4()),\n            "dados_novos": "{\"campo\": \"valor\"}",\n            "endereco_ip": "127.0.0.1"\n        }\n        db_log = LogAuditoriaGeral(**log_data)\n        db_session.add(db_log)\n        db_session.commit()\n        db_session.refresh(db_log)\n\n        # Tentar obter o log via API (requer permissão de admin)\n        response = authenticated_admin_client.get(\n            "/api/v1/auditoria/logs",\n            params={\n                "usuario_id": str(authenticated_admin_client.user_id),\n                "acao": "TEST_ACTION"\n            }\n        )\n        assert response.status_code == 200\n        data = response.json()\n        assert len(data) >= 1\n        assert any(log["acao"] == "TEST_ACTION" for log in data)\n        assert any(log["usuario_id"] == str(authenticated_admin_client.user_id) for log in data)\n\n    def test_filter_audit_logs_by_clinica(self, authenticated_admin_client, db_session):\n        """Testa a filtragem de logs de auditoria por clínica."""\n        # Criar uma segunda clínica e um usuário para ela\n        clinica2 = Clinica(nome="Clínica Teste 2")\n        perfil_user = Perfil(nome="Usuario Comum")\n        db_session.add_all([clinica2, perfil_user])\n        db_session.commit()\n        db_session.refresh(clinica2)\n        db_session.refresh(perfil_user)\n\n        user2_data = {\n            "nome_usuario": f"user2_{uuid4().hex[:4]}",\n            "nome_completo": "Usuário Clínica 2",\n            "senha": "pass123",\n            "perfil_id": perfil_user.perfil_id,\n            "clinica_id": clinica2.id\n        }\n        client.post("/api/v1/usuarios/", json=user2_data)\n        \n        # Criar logs para ambas as clínicas\n        log_clinica1 = LogAuditoriaGeral(\n            usuario_id=authenticated_admin_client.user_id,\n            clinica_id=authenticated_admin_client.clinica_id,\n            acao="ACTION_CLINICA1",\n            nome_tabela="tabela1"\n        )\n        log_clinica2 = LogAuditoriaGeral(\n            usuario_id=uuid4(), # Um ID de usuário qualquer para a clínica 2\n            clinica_id=clinica2.id,\n            acao="ACTION_CLINICA2",\n            nome_tabela="tabela2"\n        )\n        db_session.add_all([log_clinica1, log_clinica2])\n        db_session.commit()\n\n        # Filtrar por clínica 1\n        response1 = authenticated_admin_client.get(\n            "/api/v1/auditoria/logs",\n            params={\n                "clinica_id": authenticated_admin_client.clinica_id\n            }\n        )\n        assert response1.status_code == 200\n        data1 = response1.json()\n        assert len(data1) >= 1\n        assert all(log["clinica_id"] == authenticated_admin_client.clinica_id for log in data1)\n        assert any(log["acao"] == "ACTION_CLINICA1" for log in data1)\n        assert not any(log["acao"] == "ACTION_CLINICA2" for log in data1)\n\n        # Filtrar por clínica 2\n        response2 = authenticated_admin_client.get(\n            "/api/v1/auditoria/logs",\n            params={\n                "clinica_id": clinica2.id\n            }\n        )\n        assert response2.status_code == 200\n        data2 = response2.json()\n        assert len(data2) >= 1\n        assert all(log["clinica_id"] == clinica2.id for log in data2)\n        assert any(log["acao"] == "ACTION_CLINICA2" for log in data2)\n        assert not any(log["acao"] == "ACTION_CLINICA1" for log in data2)\n\n    def test_filter_audit_logs_by_action_and_table(self, authenticated_admin_client, db_session):\n        """Testa a filtragem de logs de auditoria por ação e nome da tabela."""\n        log_data1 = LogAuditoriaGeral(\n            usuario_id=authenticated_admin_client.user_id,\n            clinica_id=authenticated_admin_client.clinica_id,\n            acao="LOGIN_SUCCESS",\n            nome_tabela="usuarios"\n        )\n        log_data2 = LogAuditoriaGeral(\n            usuario_id=authenticated_admin_client.user_id,\n            clinica_id=authenticated_admin_client.clinica_id,\n            acao="UPDATE_PROFILE",\n            nome_tabela="usuarios"\n        )\n        log_data3 = LogAuditoriaGeral(\n            usuario_id=authenticated_admin_client.user_id,\n            clinica_id=authenticated_admin_client.clinica_id,\n            acao="CREATE_PATIENT",\n            nome_tabela="pacientes"\n        )\n        db_session.add_all([log_data1, log_data2, log_data3])\n        db_session.commit()\n\n        # Filtrar por ação\n        response_action = authenticated_admin_client.get(\n            "/api/v1/auditoria/logs",\n            params={"acao": "LOGIN_SUCCESS"}\n        )\n        assert response_action.status_code == 200\n        data_action = response_action.json()\n        assert len(data_action) >= 1\n        assert all(log["acao"] == "LOGIN_SUCCESS" for log in data_action)\n\n        # Filtrar por nome da tabela\n        response_table = authenticated_admin_client.get(\n            "/api/v1/auditoria/logs",\n            params={"nome_tabela": "pacientes"}\n        )\n        assert response_table.status_code == 200\n        data_table = response_table.json()\n        assert len(data_table) >= 1\n        assert all(log["nome_tabela"] == "pacientes" for log in data_table)\n\n        # Filtrar por ação e tabela\n        response_both = authenticated_admin_client.get(\n            "/api/v1/auditoria/logs",\n            params={"acao": "UPDATE_PROFILE", "nome_tabela": "usuarios"}\n        )\n        assert response_both.status_code == 200\n        data_both = response_both.json()\n        assert len(data_both) >= 1\n        assert all(log["acao"] == "UPDATE_PROFILE" and log["nome_tabela"] == "usuarios" for log in data_both)\n